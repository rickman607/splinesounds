# -*- coding: utf-8 -*-
"""cspline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l9VxetQCsirIvR9RW-fRyfAf6ltugSF9
"""

import numpy as np

def cspline(knots,data,x):
  """
  """
  N = np.size(knots-1)
  P = np.size(x)
  h = np.diff(knots)
  D = np.diff(data)/h
  dD3 = 3*np.diff(D)
  a = data[:N]

  # Generar las diagonales de la matriz A
  """
  H = (np.diag(2*(h[:-1]+h[1:]))+np.diag(h[1:-1],1)+np.diag(h[1:-1],-1))
  #print(H)
  """

  A1 = [0]
  A2 = 2*(h[:-1]+h[1:])
  A3 = h[1:-1]
  #for i in range (1,N-2):
   # A1.append(h[i])
    #A3.append(h[i])
  A1 = np.append(A1,A3)
  A3 = np.append(A3,0)
  c = np.zeros(N)
  c[1:N-1]=np.array(tripiv(A1,A2,A3,dD3))
  b = D-h*(c[1:]+2*c[:-1])/3
  d = (c[1:]-c[:1])/(3*h)

  """
  c = np.zeros(N)
  c[1:N-1]=np.linalg.solve(H,dD3)
  b = D-h*(c[1:]+2*c[:-1])/3
  d = (c[1:]-c[:1])/(3*h)
  """
  # Evaluar el spline en x
  s = np.empty(P)
  for i in range(P):
    indices = np.argwhere(x[i]>knots)
    if indices.size>0:
      k = indices.flat[-1]
    elif x[i] == knots[0]:
      k = 0
    else:
      raise ValueError('cspline no da puntos afuera del intervalo de los nodos')
    z=x[i]-knots[k]
    s[i]=a[k]+z*(b[k]+z*(c[k]+z*d[k]))
  return s